#!/usr/bin/env node

"use strict";

var program         = require('commander'),
    fs              = require('fs'),
    path            = require('path'),
    url             = require('url'),
    stylecow        = require('stylecow-core'),
    plugins         = require('stylecow-plugins'),
    updateNotifier  = require('update-notifier'),
    inquirer        = require('inquirer'),
    chalk           = require('chalk'),
    figures         = require('figures'),
    mkdirp          = require('mkdirp'),
    glob            = require('glob'),
    pkg             = require('../package.json'),
    cwd             = process.cwd();

updateNotifier({pkg: pkg}).notify();

program
    .version(pkg.version)
    .usage('[options]')
    .option('-c, --config <file>', 'use a specific config file instead ./stylecow.json')
    .option('-j, --config-json <code>', 'use an inline JSON as config')
    .option('-w, --watch', 'watches the changes in the input CSS files')
    .option('-r, --live-reload', 'Live reload the browser on change the css');


// init command
program
    .command('init')
    .description('Creates a new configuration file')
    .action(function config(command) {
        initConfig(function (config, file) {
            writeConfig(file, config);
        });
    });

// run
program
    .command('run')
    .description('Run a js module')
    .option('-m, --module <path>', 'Set other module instead the default "stylecow"')
    .action(function config(command) {
        let moduleName = path.resolve(cwd, command.module || 'stylecow');

        require(moduleName)(stylecow);
    });

// logo command
program
    .command('logo')
    .description('Very useful command to display the stylecow logo')
    .action(function config(command) {
        printLogo();
    });

// help
program.on('--help', function () {
  console.log('  Examples:');
  console.log('');
  console.log('    $ stylecow');
  console.log('    $ stylecow -w');
  console.log('    $ stylecow -r');
  console.log('    $ stylecow -c css/stylecow.json');
  console.log('');
});

// run
program.parse(process.argv);

if (!program.args.length) {
    let config, basePath;

    //Load config and basePath
    if (program.configJson) {
        config = JSON.parse(program.configJson);
        printInfo('Config loaded from inline JSON');
        basePath = cwd;
    } else {
        let configFile = program.config || cwd;

        if (fs.statSync(configFile).isDirectory()) {
            configFile = path.resolve(configFile, 'stylecow.json');
        }

        config = readConfig(configFile);

        if (config) {
            printInfo('Config loaded from: ', chalk.gray(configFile));
            basePath = path.dirname(configFile);
        }
    }

    if (config) {
        cwd = basePath;

        //Configure stylecow tasks
        let tasks = new stylecow.Tasks();

        if (config.support) {
            tasks.minSupport(config.support);
        }

        tasks.use(plugins(config.plugins));

        if (config.modules) {
            config.modules.forEach(module => tasks.use(require(module)));
        }

        run(tasks, config, program.watch, program.liveReload);
    }
}

/* =================================================== */

function run (tasks, config, watch, liveReload) {
    if (!config.files) {
        printError('No css input files');
        return;
    }

    config.files = resolveFiles(config.files);
    config.liveReload = liveReload;

    if (config.liveReload) {
        config.watch = true;
    } else {
        config.watch = watch;
    }

    config.watchingFiles = {};

    //Init websocket for live reload
    if (config.liveReload) {
        //Open the websocket server
        var WebSocketServer = require('ws').Server,
            wss = new WebSocketServer({port: 8080});

        wss.on('connection', function (ws) {
            config.socket = ws;

            ws.on('message', function (data) {
                var data = JSON.parse(data);

                if (data.subject === 'connection') {
                    console.log('');
                    printInfo('Connected to browser ', chalk.gray(data.agent));

                    config.files.forEach(function (file) {
                        data.files.forEach(function (f) {
                            if (f.baseUrl && file.output === f.output) {
                                printStep('Syncing: ', chalk.gray(f.baseUrl));
                                file.baseUrl = f.baseUrl;
                            }
                        });
                    });
                }
            });

            //Get the baseurl for each file
            ws.send(JSON.stringify({
                subject: 'connection',
                files: config.files
            }));
        });

        //Create a webserver to serve the js code
        var http = require('http');
        var script = fs.readFileSync(__dirname + '/ws-script.js', {encoding: 'utf-8'});

        http.createServer(function (req, res) {
            res.writeHead(200, {'Content-Type': 'text/javascript'});
            res.end(script);
        }).listen(8081, '127.0.0.1');

        printStep('WebSocket server running ', chalk.gray('ws://127.0.0.1:8080'));
        printStep('Web server running ', chalk.gray('http://127.0.0.1:8081'));

        console.log('');
        console.log('To live reload, add the following code to your html:');
        console.log(chalk.black.bgWhite('<script type="text/javascript" src="//127.0.0.1:8081"></script>'));
        console.log('');
    }

    //Init watcher
    if (config.watch) {
        config.watch = require('chokidar').watch([], {
            persistent: true
        });

        config.watch.on('change', function (filepath) {
            var files = config.watchingFiles[filepath];

            if (!files) {
                return;
            }

            console.log('');
            printInfo('Change detected: ', chalk.gray(filepath));

            files.forEach(function (file) {
                executeTasks(tasks, config, file);

                //Add new files to watching index
                file.files.forEach(function (f) {
                    if (config.watchingFiles[f]) {
                        if (config.watchingFiles[f].indexOf(file) === -1) {
                            config.watchingFiles[f].push(file);
                        }
                    } else {
                        config.watchingFiles[f] = [file];
                        config.watch.add(f);
                        printStep('Watching: ', chalk.gray(f));
                    }
                });

                //Remove old files from watching index
                for (var f in config.watchingFiles) {
                    var index = config.watchingFiles[f].indexOf(file);

                    if (index !== -1) {
                        if (file.files.indexOf(f) === -1) {
                            config.watchingFiles[f].splice(index, 1);

                            if (!config.watchingFiles[f].length) {
                                delete config.watchingFiles[f];
                                config.watch.unwatch(f);
                                printStep('Unwatch: ', chalk.gray(f));
                            }
                        }
                    }
                }
            });
        });
    }

    //Convert the code
    config.files.forEach(function (file) {
        if (file.map === 'false') {
            file.map = false;
        }

        executeTasks(tasks, config, file);

        //Watch changes
        if (config.watch) {
            file.files.forEach(function (f) {
                if (!config.watchingFiles[f]) {
                    config.watchingFiles[f] = [file];
                    config.watch.add(f);
                } else {
                    config.watchingFiles[f].push(file);
                }
            });
        }
    });

    if (config.watch) {
        printStep('Waiting for changes...');
    }
}

//Converts the code and output the result
function executeTasks (tasks, config, file) {
    let css,
        coder,
        error = false,
        fullpath = path.resolve(cwd, file.input);

    if (!file.input) {
        console.error('');
        printError('No input file defined');
        console.error('');
        process.exit();
    }

    if (!fs.existsSync(fullpath)) {
        console.error('');
        printError('Input file not found: ', chalk.gray(fullpath));
        console.error('');
        process.exit();
    }

    if (!fs.statSync(fullpath).isFile()) {
        console.error('');
        printError('The input file is not valid: ', chalk.gray(fullpath));
        console.error('');
        process.exit();
    }

    try {
        css = stylecow.parseFile(fullpath);

        //Convert the code
        tasks.run(css);

    } catch (e) {
        error = e;

        printError('Css error: ', chalk.gray(error.message.replace(/\n/g, '\n  ')));

        if (config.socket) {
            config.socket.send(JSON.stringify({
                subject: 'error',
                code: stylecow.cssError(e).toString()
            }));

            return;
        }

        if (config.watch) {
            css = stylecow.cssError(e);
        } else {
            if (!file.files) {
                process.exit();
            }

            return;
        }
    }

    //Send the code to socket
    if (config.socket && file.baseUrl) {
        let basepath = path.dirname(file.baseUrl);

        css.getAll({
            type: 'Function',
            name: 'url'
        }).getAll({
            type: ['Keyword', 'String']
        }).forEach(function (keyword) {
            if (!url.parse(keyword.name).hostname && (keyword.name[0] !== '/')) {
                keyword.name = basepath + '/' + keyword.name;
            }
        });

        coder = (new stylecow.Coder('minify')).sourceMap('embed');

        config.socket.send(JSON.stringify({
            subject: 'code',
            code: coder.run(css).css,
            baseUrl: file.baseUrl
        }), {}, function () {
            printSuccess('Css updated in the browser');
        });

        //Generate and convert the code again to save
        if (!error) {
            css = stylecow.parseFile(path.resolve(cwd, file.input));

            tasks.run(css);
        }
    }

    if (typeof config.code === 'object') {
        coder = new stylecow.Coder('custom');
        const custom = Object.assign({}, coder.styles[config.code.style || 'normal'], config.code);
        delete custom.style;
        coder.addStyle('custom', custom);

    } else {
        coder = new stylecow.Coder(config.code);
    }

    if (config.map) {
        coder.sourceMap(config.map);
    }

    let code = coder.run(css, file.output, null, file.map);

    if (file.output) {
        let output = path.resolve(cwd, file.output);
        writeFile(output, code.css)
        printSuccess('Saved file: ', chalk.gray(path.relative(process.cwd(), output)));

        if (code.mapFile) {
            let map = path.resolve(cwd, code.mapFile);
            writeFile(map, code.map);
            printSuccess('Saved file: ', chalk.gray(path.relative(process.cwd(), map)));
        }

    } else {
        console.log('');
        console.log(code.css);
        console.log('');
    }

    //Get secondary files
    if (!error) {
        file.files = getFiles(css);
    }
}

function initConfig (callback) {
    var minSupport;

    var questions = [
        {
            type: "input",
            name: "file",
            message: "Browsers you want to support",
            default: '> 1%',
            validate: function (query) {
                    minSupport = getSupportFromBrowserlist(query);
                try {
                } catch (error) {
                    return false;
                }

                return true;
            }
        },
        {
            type: "input",
            name: "explorer",
            message: "Min version supported in Internet Explorer",
            default: function () {
                return minSupport.explorer;
            }
        },
        {
            type: "input",
            name: "edge",
            message: "Min version supported in Microsoft Edge",
            default: function () {
                return minSupport.edge;
            }
        },
        {
            type: "input",
            name: "firefox",
            message: "Min version supported in Mozilla Firefox",
            default: function () {
                return minSupport.firefox;
            }
        },
        {
            type: "input",
            name: "chrome",
            message: "Min version supported in Google Chrome",
            default: function () {
                return minSupport.chrome;
            }
        },
        {
            type: "input",
            name: "safari",
            message: "Min version supported in Safari",
            default: function () {
                return minSupport.safari;
            }
        },
        {
            type: "input",
            name: "opera",
            message: "Min version supported in Opera",
            default: function () {
                return minSupport.opera;
            }
        },
        {
            type: "input",
            name: "android",
            message: "Min version supported in Android",
            default: function () {
                return minSupport.android;
            }
        },
        {
            type: "input",
            name: "ios",
            message: "Min version supported in Safari for iOS",
            default: function () {
                return minSupport.ios;
            }
        },
        {
            type: "checkbox",
            name: "plugins",
            message: "Plugins to apply",
            choices: plugins.getAll(),
            default: plugins.getAll()
        },
        {
            type: "list",
            name: "code",
            message: "Code style used to generate the css",
            choices: ['normal', 'minify']
        },
        {
            type: "input",
            name: "input",
            message: "Input css filename"
        },
        {
            type: "input",
            name: "output",
            message: "Output css filename",
            default: function (answers) {
                if (answers.input) {
                    if (answers.code == 'minify') {
                        return answers.input.replace('.css', '.min.css');
                    }

                    return answers.input.replace('.css', '.dist.css');
                }
            }
        },
        {
            type: "list",
            name: "map",
            message: "Generate the css source map?",
            choices: function (answers) {
                var file = answers.output.replace('.css', '.map');

                var choices = [
                    {
                        name: 'Automatically choose the best option',
                        value: 'auto',
                        default: true
                    },{
                        name: 'Yes, save in a external .map file' +  (file ? ' (' + file + ')' : ''),
                        value: 'file'
                    },{
                        name: 'Yes, embed in the css',
                        value: 'embed'
                    },{
                        name: 'No',
                        value: 'none'
                    }
                ];

                return choices;
            }
        }
    ];

    inquirer.prompt(questions).then(function (answers) {
        var newConfig = {
            files: [
                {
                    input: answers.input,
                    output: answers.output
                }
            ]
        };

        newConfig.support = {};

        ['explorer','edge','firefox','chrome','safari','opera','android','ios'].forEach(function (browser) {
            newConfig.support[browser] = (!answers[browser] || (answers[browser] === 'false')) ? false : parseFloat(answers[browser], 10);
        });

        newConfig.plugins = answers.plugins;
        newConfig.code = answers.code;
        newConfig.map = answers.map;

        console.log(chalk.gray(JSON.stringify(newConfig, null, '  ')));

        inquirer.prompt([
            {
                type: "confirm",
                name: "ok",
                message: "Looks fine?"
            }
        ]).then(function (answers) {
            if (answers.ok) {
                var filename = 'stylecow.json';
            
                if (fs.existsSync(filename)) {
                    inquirer.prompt([
                        {
                            type: "confirm",
                            name: "ok",
                            message: "The file `stylecow.json` already exists. Do you want to replace it?"
                        }
                    ]).then(function (replace) {
                        if (replace.ok) {
                            callback(newConfig, filename);
                        }
                    });
                } else {
                    callback(newConfig, filename);
                }
            }
        });
    });
}

function resolveFiles(files) {
    let resolved = [];

    files.forEach(function (file) {
        if (!glob.hasMagic(file.input)) {
            return resolved.push(file);
        }

        glob
            .sync(file.input, {cwd: cwd})
            .forEach(function (input) {
                let info = path.parse(input);

                resolved.push({
                    input: input,
                    output: file.output
                        .replace('[dir]', info.dir)
                        .replace('[base]', info.base)
                        .replace('[ext]', info.ext)
                        .replace('[name]', info.name)
                });
            });
    });

    return resolved;
}

function getFiles (css) {
    var files = {};
    var nodes = css.getAll();
    nodes.push(css);

    nodes.filter(function (child) {
            return ('file' in child.data) && child.data.file;
        })
        .map(function (child) {
            return child.data.file;
        })
        .forEach(function (file) {
            files[path.normalize(file)] = null;
        });

    return Object.getOwnPropertyNames(files);
}

function readConfig (file) {
    file = path.resolve(process.cwd(), file);

    if (fs.existsSync(file)) {
        return require(file);
    }

    console.error('');
    printError('Config file not found: ', path.relative(process.cwd(), file));
    console.error('');

    inquirer.prompt([
        {
            type: "confirm",
            name: "ok",
            message: "Do you want to create it now?"
        }
    ]).then(function (create) {
        console.error('');

        if (create.ok) {
            initConfig(function (config, file) {
                writeConfig(file, config);
            });
        } else {
            printInfo(chalk.bold('Choose one of the following options:'));
            console.log(chalk.gray('  run ') + '`stylecow init' + chalk.gray(' to create a config file in the current directory'));
            console.log(chalk.gray('  or run ') + '`stylecow -c <config file>`' + chalk.gray(' if it\'s not in this directory'));
            console.log('');
        }
    });
}

function writeConfig (file, config) {
    writeFile(file, JSON.stringify(config, null, '  '));

    printSuccess('Config file saved: ', chalk.gray(file));
    console.log('');
}

function writeFile (file, content) {
    var dir = path.dirname(file);

    if (!fs.existsSync(dir)) {
        mkdirp.sync(dir);
    }

    fs.writeFileSync(file, content);
}

function getSupportFromBrowserlist (query) {
    var browsersList = require('browserslist');
    var browsers = {
        edge: 'edge',
        ie: 'explorer',
        firefox: 'firefox',
        chrome: 'chrome',
        safari: 'safari',
        opera: 'opera',
        ios_saf: 'ios',
        android: 'android'
    };
    var support = {
        edge: false,
        explorer: false,
        firefox: false,
        chrome: false,
        safari: false,
        opera: false,
        android: false,
        ios: false
    };

    browsersList(query).forEach(function (val) {
        val = val.split(' ', 2);

        var name = browsers[val[0]];

        if (!name) {
            return;
        }

        var value = val[1].split('-')[0];

        if (value) {
            support[name] = parseFloat(value);
        }
    });

    return support;
}

function printLogo () {
    console.log(chalk.gray(`
██                                                          ██
███                                                        ███
 ████                                                    ████
  ████                                                  ████
   █████                                             ██████
    ███████                █████████               ███████
     ███████████      ███████████████████     ███████████
       █████████████████████████████████████████████████
         █████████████████████████████████████████████
             ████████████████         █████████████
                  ████████████████         █████
                    ███████████████████
                      ████████████████████
                         ██████████████████
                              ██████████████
                     ████         ██████████
                    █████████   ███████████
                   ███████████████████████
                     ███████████████████
                           █████████
`), `
          STYLECOW - Modern css for all browsers
                         v.${pkg.version}
`);
}

function printInfo (message, details) {
    console.info(figures.info + ' ' + message + (details || ''));
}

function printStep (message, details) {
    console.log(chalk.cyan(figures.pointer + ' ' + message) + (details || ''));
}

function printSuccess (message, details) {
    console.log(chalk.green(figures.tick + ' ' + message) + (details || ''));
}

function printError (message, details) {
    console.error(chalk.red(figures.cross + ' ' + message) + (details || ''));
}
